<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/cmyun/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/cmyun/" rel="alternate" type="text/html" /><updated>2019-08-27T13:27:28+08:00</updated><id>http://localhost:4000/cmyun/feed.xml</id><title type="html">Cmyun</title><subtitle>能力的提升靠一天天的积累</subtitle><entry><title type="html">类中定义自身类的对象</title><link href="http://localhost:4000/cmyun/%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E8%87%AA%E8%BA%AB%E5%AE%9E%E4%BE%8B/" rel="alternate" type="text/html" title="类中定义自身类的对象" /><published>2019-08-27T00:00:00+08:00</published><updated>2019-08-27T00:00:00+08:00</updated><id>http://localhost:4000/cmyun/%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E8%87%AA%E8%BA%AB%E5%AE%9E%E4%BE%8B</id><content type="html" xml:base="http://localhost:4000/cmyun/%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E8%87%AA%E8%BA%AB%E5%AE%9E%E4%BE%8B/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-自身类的成员变量只能被定义为static的否则会造成溢出&quot; id=&quot;markdown-toc-1-自身类的成员变量只能被定义为static的否则会造成溢出&quot;&gt;1. 自身类的成员变量只能被定义为static的，否则会造成溢出&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-原理&quot; id=&quot;markdown-toc-2-原理&quot;&gt;2. 原理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-源码引用&quot; id=&quot;markdown-toc-3-源码引用&quot;&gt;3. 源码引用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-自身类的成员变量只能被定义为static的否则会造成溢出&quot;&gt;1. 自身类的成员变量只能被定义为static的，否则会造成溢出&lt;/h2&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//private static User user = new User();&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cmyun&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上，在User中定义自身的对象，结果如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main&quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;StackOverflowError&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当在user前加上static时，就可以正常运行：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cmyun&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Process&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finished&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-原理&quot;&gt;2. 原理&lt;/h2&gt;

&lt;p&gt;我们知道类的static属性，是类级别的，不是实例级别的。所以在类第一次初始化的时候，static属性会被初始化，并被保存到静态区，之后再new实例的时候，static属性不会再被初始化，而是共享第一次创建的。&lt;/p&gt;

&lt;p&gt;所以，如果不是static的，则User会无限循环的创建自己。但是，当加上static后，只在第一次创建一个static的自己，之后就会直接引用静态区的User对象，而不会再创建。&lt;/p&gt;

&lt;h2 id=&quot;3-源码引用&quot;&gt;3. 源码引用&lt;/h2&gt;

&lt;p&gt;在AbstractQueueSynchronizer抽象类中，定义了一个静态内部类Node，每个Node有两种模式，分别是Shared和Exclusive，实际上Shared和Exclusive都是Node类型的。源码如下：&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** Marker to indicate a node is waiting in shared mode */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SHARED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/** Marker to indicate a node is waiting in exclusive mode */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EXCLUSIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;cm&quot;&gt;/**
         * Link to next node waiting on condition, or the special
         * value SHARED.  Because condition queues are accessed only
         * when holding in exclusive mode, we just need a simple
         * linked queue to hold nodes while they are waiting on
         * conditions. They are then transferred to the queue to
         * re-acquire. And because conditions can only be exclusive,
         * we save a field by using special value to indicate shared
         * mode.
         */&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextWaiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/**
         * Returns true if node is waiting in shared mode.
         */&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isShared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextWaiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SHARED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// Used by addWaiter&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextWaiter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如上，SHARED和EXCLUSIVE都是static Node类型的。通过构造器在创建Node的时候指定mode，将Node的模式存到nextWaiter中，所以判断Node是shared或Exclusive模式，就可以通过nextWaiter的值来判断&lt;/p&gt;</content><author><name></name></author><category term="Java" /><summary type="html">1. 自身类的成员变量只能被定义为static的，否则会造成溢出 2. 原理 3. 源码引用 1. 自身类的成员变量只能被定义为static的，否则会造成溢出 public class User implements Serializable { private static String username; private User user = new User(); //private static User user = new User(); public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public static void main(String[] args){ User user = new User(); user.setUsername(&quot;cmyun&quot;); System.out.println(user.getUsername()); } } 如上，在User中定义自身的对象，结果如下： Exception in thread &quot;main&quot; java.lang.StackOverflowError at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) at User.&amp;lt;init&amp;gt;(User.java:8) 当在user前加上static时，就可以正常运行： cmyun Process finished with exit code 0 2. 原理 我们知道类的static属性，是类级别的，不是实例级别的。所以在类第一次初始化的时候，static属性会被初始化，并被保存到静态区，之后再new实例的时候，static属性不会再被初始化，而是共享第一次创建的。 所以，如果不是static的，则User会无限循环的创建自己。但是，当加上static后，只在第一次创建一个static的自己，之后就会直接引用静态区的User对象，而不会再创建。 3. 源码引用 在AbstractQueueSynchronizer抽象类中，定义了一个静态内部类Node，每个Node有两种模式，分别是Shared和Exclusive，实际上Shared和Exclusive都是Node类型的。源码如下： static final class Node { /** Marker to indicate a node is waiting in shared mode */ static final Node SHARED = new Node(); /** Marker to indicate a node is waiting in exclusive mode */ static final Node EXCLUSIVE = null; /** * Link to next node waiting on condition, or the special * value SHARED. Because condition queues are accessed only * when holding in exclusive mode, we just need a simple * linked queue to hold nodes while they are waiting on * conditions. They are then transferred to the queue to * re-acquire. And because conditions can only be exclusive, * we save a field by using special value to indicate shared * mode. */ Node nextWaiter; /** * Returns true if node is waiting in shared mode. */ final boolean isShared() { return nextWaiter == SHARED; } Node(Thread thread, Node mode) { // Used by addWaiter this.nextWaiter = mode; this.thread = thread; } } 如上，SHARED和EXCLUSIVE都是static Node类型的。通过构造器在创建Node的时候指定mode，将Node的模式存到nextWaiter中，所以判断Node是shared或Exclusive模式，就可以通过nextWaiter的值来判断</summary></entry><entry><title type="html">几种网络设备介绍</title><link href="http://localhost:4000/cmyun/%E5%87%A0%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%BB%8B%E7%BB%8D/" rel="alternate" type="text/html" title="几种网络设备介绍" /><published>2019-08-26T00:00:00+08:00</published><updated>2019-08-26T00:00:00+08:00</updated><id>http://localhost:4000/cmyun/%E5%87%A0%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%BB%8B%E7%BB%8D</id><content type="html" xml:base="http://localhost:4000/cmyun/%E5%87%A0%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%AE%BE%E5%A4%87%E4%BB%8B%E7%BB%8D/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-概述&quot; id=&quot;markdown-toc-1-概述&quot;&gt;1. 概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-中继器信号增强器&quot; id=&quot;markdown-toc-2-中继器信号增强器&quot;&gt;2. 中继器——信号增强器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-集线器多端口中继器&quot; id=&quot;markdown-toc-3-集线器多端口中继器&quot;&gt;3. 集线器——多端口中继器&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-网桥局域网连接的桥梁&quot; id=&quot;markdown-toc-4-网桥局域网连接的桥梁&quot;&gt;4. 网桥——局域网连接的桥梁&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-交换机硬件版的网桥&quot; id=&quot;markdown-toc-5-交换机硬件版的网桥&quot;&gt;5. 交换机——硬件版的网桥&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6-路由器具有选择路径的功能&quot; id=&quot;markdown-toc-6-路由器具有选择路径的功能&quot;&gt;6. 路由器——具有选择路径的功能&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7-网关网间连接器协议转换器&quot; id=&quot;markdown-toc-7-网关网间连接器协议转换器&quot;&gt;7. 网关——网间连接器、协议转换器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;1. 概述&lt;/h2&gt;

&lt;p&gt;网关——传输层和应用层&lt;/p&gt;

&lt;p&gt;路由器——网络层&lt;/p&gt;

&lt;p&gt;网桥和交换机——数据链路层&lt;/p&gt;

&lt;p&gt;中继器和集线器——物理层&lt;/p&gt;

&lt;h2 id=&quot;2-中继器信号增强器&quot;&gt;2. 中继器——信号增强器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在两个网络节点之间，起到增强信号，延长网络线路的作用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;中继器是模拟设备，用于连接两根电缆段。中继器不认识帧、分组和头的概念，只理解电压值&lt;/li&gt;
  &lt;li&gt;一句话总结：中继器，就是简单的信号放大器，使信号能传的更远&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-集线器多端口中继器&quot;&gt;3. 集线器——多端口中继器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;集线器，就是有多个端口的中继器&lt;/li&gt;
  &lt;li&gt;集线器，把每个输入端口的信号放大再发到其他所有端口。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;4-网桥局域网连接的桥梁&quot;&gt;4. 网桥——局域网连接的桥梁&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;网桥是局域网与局域网之间建立连接的桥梁&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作用是&lt;strong&gt;扩展网络和通信手段&lt;/strong&gt;，在各种传输介质中转发数据信号，扩展网络的距离，同时又有选择地将现有地址的信号从一个传输介质发送到另一个传输介质，并能有效地限制两个介质系统中无关紧要的通信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;一句话总结，网桥，将两个LAN连起来，根据MAC地址转发帧，可以看作一个“低层的路由器”&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;5-交换机硬件版的网桥&quot;&gt;5. 交换机——硬件版的网桥&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;工作在数据链路层，只认识MAC地址，不认识IP地址&lt;/li&gt;
  &lt;li&gt;具有自动寻址功能和交换功能。交换机能识别帧中的源MAC地址和目的MAC地址，因此可以在任意两个端口间建立联系，在数据帧的发送端和接收端之间建立临时的交换路径，使数据帧直接由源地址到达目的地址。&lt;/li&gt;
  &lt;li&gt;交换机是使用硬件来完成网桥用软件完成的过滤、学习和转发功能。&lt;/li&gt;
  &lt;li&gt;一句话总结，交换机是高级的网桥，他有网桥的功能，且性能比网桥强。两种的区别是，交换机常常用来连接独立的计算机，而网桥连接的目标是LAN，所以交换机比网桥端口多。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;6-路由器具有选择路径的功能&quot;&gt;6. 路由器——具有选择路径的功能&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;工作在网络层上，可以识别IP地址&lt;/li&gt;
  &lt;li&gt;具有判断网络地址、选择路径、过来和分隔网络信息流的功能。&lt;/li&gt;
  &lt;li&gt;一方面能够跨越不同的物理网络类型（DDN、FDDI、以太网等等），另一方面在逻辑上将整个互连网络分割成逻辑上独立的网络单位，使网络具有一定的逻辑结构。&lt;/li&gt;
  &lt;li&gt;一句话总结，路由器为经过的每个IP数据包选择一条最佳传输路径，并将数据有效的传输到目的节点。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;7-网关网间连接器协议转换器&quot;&gt;7. 网关——网间连接器、协议转换器&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;最复杂的网络互连设备。&lt;/li&gt;
  &lt;li&gt;既可以用于广域网互连，也可以用于局域网互连&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;一句话总结，网关，通过字面意思解释就是网络的关口。从技术角度来解释，就是连接两个不同网络的接口，比如局域网的共享上网服务器就是局域网和广域网的接口。&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="Network" /><summary type="html">1. 概述 2. 中继器——信号增强器 3. 集线器——多端口中继器 4. 网桥——局域网连接的桥梁 5. 交换机——硬件版的网桥 6. 路由器——具有选择路径的功能 7. 网关——网间连接器、协议转换器 1. 概述 网关——传输层和应用层 路由器——网络层 网桥和交换机——数据链路层 中继器和集线器——物理层 2. 中继器——信号增强器 在两个网络节点之间，起到增强信号，延长网络线路的作用 中继器是模拟设备，用于连接两根电缆段。中继器不认识帧、分组和头的概念，只理解电压值 一句话总结：中继器，就是简单的信号放大器，使信号能传的更远 3. 集线器——多端口中继器 集线器，就是有多个端口的中继器 集线器，把每个输入端口的信号放大再发到其他所有端口。 4. 网桥——局域网连接的桥梁 网桥是局域网与局域网之间建立连接的桥梁 作用是扩展网络和通信手段，在各种传输介质中转发数据信号，扩展网络的距离，同时又有选择地将现有地址的信号从一个传输介质发送到另一个传输介质，并能有效地限制两个介质系统中无关紧要的通信。 一句话总结，网桥，将两个LAN连起来，根据MAC地址转发帧，可以看作一个“低层的路由器” 5. 交换机——硬件版的网桥 工作在数据链路层，只认识MAC地址，不认识IP地址 具有自动寻址功能和交换功能。交换机能识别帧中的源MAC地址和目的MAC地址，因此可以在任意两个端口间建立联系，在数据帧的发送端和接收端之间建立临时的交换路径，使数据帧直接由源地址到达目的地址。 交换机是使用硬件来完成网桥用软件完成的过滤、学习和转发功能。 一句话总结，交换机是高级的网桥，他有网桥的功能，且性能比网桥强。两种的区别是，交换机常常用来连接独立的计算机，而网桥连接的目标是LAN，所以交换机比网桥端口多。 6. 路由器——具有选择路径的功能 工作在网络层上，可以识别IP地址 具有判断网络地址、选择路径、过来和分隔网络信息流的功能。 一方面能够跨越不同的物理网络类型（DDN、FDDI、以太网等等），另一方面在逻辑上将整个互连网络分割成逻辑上独立的网络单位，使网络具有一定的逻辑结构。 一句话总结，路由器为经过的每个IP数据包选择一条最佳传输路径，并将数据有效的传输到目的节点。 7. 网关——网间连接器、协议转换器 最复杂的网络互连设备。 既可以用于广域网互连，也可以用于局域网互连 与网桥只是简单地传达信息不同，网关对收到的信息要重新打包，以适应目的系统的需求。 一句话总结，网关，通过字面意思解释就是网络的关口。从技术角度来解释，就是连接两个不同网络的接口，比如局域网的共享上网服务器就是局域网和广域网的接口。</summary></entry><entry><title type="html">tr命令</title><link href="http://localhost:4000/cmyun/tr/" rel="alternate" type="text/html" title="tr命令" /><published>2019-08-25T00:00:00+08:00</published><updated>2019-08-25T00:00:00+08:00</updated><id>http://localhost:4000/cmyun/tr</id><content type="html" xml:base="http://localhost:4000/cmyun/tr/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1-概述&quot; id=&quot;markdown-toc-1-概述&quot;&gt;1. 概述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2-语法&quot; id=&quot;markdown-toc-2-语法&quot;&gt;2. 语法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3-options&quot; id=&quot;markdown-toc-3-options&quot;&gt;3. Options&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4-字符集set&quot; id=&quot;markdown-toc-4-字符集set&quot;&gt;4. 字符集SET&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5-实例&quot; id=&quot;markdown-toc-5-实例&quot;&gt;5. 实例&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-将文件中出现的abc替换为xyz&quot; id=&quot;markdown-toc-51-将文件中出现的abc替换为xyz&quot;&gt;5.1 将文件中出现的”abc“替换为”xyz“&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-统一字母大小写&quot; id=&quot;markdown-toc-52-统一字母大小写&quot;&gt;5.2 统一字母大小写&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#53-将文件中的0-9替换为a-j&quot; id=&quot;markdown-toc-53-将文件中的0-9替换为a-j&quot;&gt;5.3 将文件中的[0-9]替换为[a-j]&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#54-删除文件中出现的snail字符&quot; id=&quot;markdown-toc-54-删除文件中出现的snail字符&quot;&gt;5.4 删除文件中出现的“Snail”字符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#55-删除文件中出现的换行和制表&quot; id=&quot;markdown-toc-55-删除文件中出现的换行和制表&quot;&gt;5.5 删除文件中出现的换行和制表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#56-删除连续重复字符&quot; id=&quot;markdown-toc-56-删除连续重复字符&quot;&gt;5.6 删除连续重复字符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#57-删除空行&quot; id=&quot;markdown-toc-57-删除空行&quot;&gt;5.7 删除空行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#58-把路径变量中的冒号替换成换行符n&quot; id=&quot;markdown-toc-58-把路径变量中的冒号替换成换行符n&quot;&gt;5.8 把路径变量中的冒号“：”替换成换行符“\n”&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#59-创建一个文件中所有单词的列表&quot; id=&quot;markdown-toc-59-创建一个文件中所有单词的列表&quot;&gt;5.9 &lt;em&gt;创建一个文件中所有单词的列表&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#510-列转行&quot; id=&quot;markdown-toc-510-列转行&quot;&gt;5.10 列转行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#511-杀死所有包含key的进程&quot; id=&quot;markdown-toc-511-杀死所有包含key的进程&quot;&gt;5.11 杀死所有包含key的进程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;1. 概述&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;用一个字符替换另一个字符&lt;/li&gt;
  &lt;li&gt;去除字符&lt;/li&gt;
  &lt;li&gt;出去重复&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;2-语法&quot;&gt;2. 语法&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTION]... SET1 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SET2]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-options&quot;&gt;3. Options&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;-c,-C,–complement:用SET1中的字符替换SET2中的字符，一一对应&lt;/p&gt;

  &lt;p&gt;-d,–delete:删除SET1中的字符&lt;/p&gt;

  &lt;p&gt;-s,–squeeze-repeats:删除所有连续重复出现的字符，只保留第一个字符；即将连续重复出现的字符压缩为一个字符。&lt;/p&gt;

  &lt;p&gt;-t，–truncate-set1:先将SET1的长度截为与set2相同，再做替换&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;4-字符集set&quot;&gt;4. 字符集SET&lt;/h2&gt;

&lt;p&gt;可以是单字符或者字符串范围或列表&lt;/p&gt;

&lt;p&gt;[a-z]&lt;/p&gt;

&lt;p&gt;[A-Z]&lt;/p&gt;

&lt;p&gt;[0-9]&lt;/p&gt;

&lt;p&gt;[A*n]&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;C1-C2:tr “a-z” “A-Z” &amp;lt; test&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[C*Number]:Number* 是一个整数，它指定了由 &lt;em&gt;C&lt;/em&gt; 所指定的字符的重复次数。除非其首位数字是 0，否则 &lt;em&gt;Number&lt;/em&gt; 一律视为是十进制整数；如果首位数字是 0，那么视为八进制整数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[C*]:用 &lt;em&gt;C&lt;/em&gt; 指定的字符填写字符串。该选项只用于包含在 &lt;em&gt;String2&lt;/em&gt; 中的字符串末尾，它强制 &lt;em&gt;String2&lt;/em&gt; 中的字符串具有与由 &lt;em&gt;String1&lt;/em&gt; 变量所指定的字符串一样的字符数。*（星号）后面指定的任何字符都被忽略。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[:ClassName:]:指定由当前语言环境中的 &lt;em&gt;ClassName&lt;/em&gt; 所命名的字符类中的所有字符。&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;alnum所有的字母和数字
alpha所有字母
upper大写字母
lower小写字母
digit数字 
   
print所有的打印字符，包括空格
graph所有的可打印字符，不包括空格
blank所有呈水平排列的空白字符
space所有呈水平或垂直排列的空白字符
   
punct所有的标点符号
cntrl控制字符
xdigit所有的十六进制数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;除 [:lower:] 和 [:upper:] 转换字符类之外，其他字符类指定的字符都按未指定的顺序放入数组中。由于未定义字符类指定的字符的顺序，仅当目的为将多个字符映射为一个时才使用这些字符。转换字符类除外。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;[=C=]:指定所有的字符具有与 &lt;em&gt;C&lt;/em&gt; 所指定的字符相同的等价类。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\Octal:指定字符，其编码由 &lt;em&gt;Octal&lt;/em&gt; 所指定的八进制值表示。&lt;em&gt;Octal&lt;/em&gt; 可以是 1 位、2 位 或 3 位八进制整数。空字符可以用 ‘\0’ 表示，并可以像任何其他的字符那样进行处理。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\ControlCharacter:指定与 &lt;em&gt;ControlCharacter&lt;/em&gt; 所指定的值相应的控制字符。&lt;/p&gt;

    &lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;se&quot;&gt;\a&lt;/span&gt;警告
&lt;span class=&quot;se&quot;&gt;\b&lt;/span&gt;退格键
&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;换页
&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;换行
&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;回车
&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;制表键
&lt;span class=&quot;se&quot;&gt;\v&lt;/span&gt;垂直制表键
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;\\,\[,\-:反斜杠、左括号、负号&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;5-实例&quot;&gt;5. 实例&lt;/h2&gt;

&lt;h3 id=&quot;51-将文件中出现的abc替换为xyz&quot;&gt;5.1 将文件中出现的”abc“替换为”xyz“&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;abc&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;xyz&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; new_file
&lt;span class=&quot;c&quot;&gt;#这里不是讲字符串”abc“替换成&quot;xyz&quot;，而是将所有的“a”替换为“x”，“b”替换为“y”，“c”替换为“z”&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;52-统一字母大小写&quot;&gt;5.2 统一字母大小写&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;A-Z] &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; new_file
&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;A-Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-z] &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; new_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;53-将文件中的0-9替换为a-j&quot;&gt;5.3 将文件中的[0-9]替换为[a-j]&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0-9] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-j] &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; new_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;54-删除文件中出现的snail字符&quot;&gt;5.4 删除文件中出现的“Snail”字符&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Snail&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; new_file
&lt;span class=&quot;c&quot;&gt;#注意这里不是删除字符串“Snail”,而是删除所有的'S','n','a','i','l'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;55-删除文件中出现的换行和制表&quot;&gt;5.5 删除文件中出现的换行和制表&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;56-删除连续重复字符&quot;&gt;5.6 删除连续重复字符&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a-zA-Z]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;57-删除空行&quot;&gt;5.7 删除空行&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;file | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;58-把路径变量中的冒号替换成换行符n&quot;&gt;5.8 把路径变量中的冒号“：”替换成换行符“\n”&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;59-创建一个文件中所有单词的列表&quot;&gt;5.9 &lt;em&gt;创建一个文件中所有单词的列表&lt;/em&gt;&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-cs&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:lower:]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:upper:]&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[\\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;]&quot;&lt;/span&gt; &amp;lt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;510-列转行&quot;&gt;5.10 列转行&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;511-杀死所有包含key的进程&quot;&gt;5.11 杀死所有包含key的进程&lt;/h3&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-9&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;ps aux | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;key&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;awk&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{print $2}'&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="shell" /><summary type="html">1. 概述 2. 语法 3. Options 4. 字符集SET 5. 实例 5.1 将文件中出现的”abc“替换为”xyz“ 5.2 统一字母大小写 5.3 将文件中的[0-9]替换为[a-j] 5.4 删除文件中出现的“Snail”字符 5.5 删除文件中出现的换行和制表 5.6 删除连续重复字符 5.7 删除空行 5.8 把路径变量中的冒号“：”替换成换行符“\n” 5.9 创建一个文件中所有单词的列表 5.10 列转行 5.11 杀死所有包含key的进程 1. 概述 用一个字符替换另一个字符 去除字符 出去重复 2. 语法 tr [OPTION]... SET1 [SET2] 3. Options -c,-C,–complement:用SET1中的字符替换SET2中的字符，一一对应 -d,–delete:删除SET1中的字符 -s,–squeeze-repeats:删除所有连续重复出现的字符，只保留第一个字符；即将连续重复出现的字符压缩为一个字符。 -t，–truncate-set1:先将SET1的长度截为与set2相同，再做替换 4. 字符集SET 可以是单字符或者字符串范围或列表 [a-z] [A-Z] [0-9] [A*n] C1-C2:tr “a-z” “A-Z” &amp;lt; test [C*Number]:Number* 是一个整数，它指定了由 C 所指定的字符的重复次数。除非其首位数字是 0，否则 Number 一律视为是十进制整数；如果首位数字是 0，那么视为八进制整数 [C*]:用 C 指定的字符填写字符串。该选项只用于包含在 String2 中的字符串末尾，它强制 String2 中的字符串具有与由 String1 变量所指定的字符串一样的字符数。*（星号）后面指定的任何字符都被忽略。 [:ClassName:]:指定由当前语言环境中的 ClassName 所命名的字符类中的所有字符。 alnum所有的字母和数字 alpha所有字母 upper大写字母 lower小写字母 digit数字 print所有的打印字符，包括空格 graph所有的可打印字符，不包括空格 blank所有呈水平排列的空白字符 space所有呈水平或垂直排列的空白字符 punct所有的标点符号 cntrl控制字符 xdigit所有的十六进制数 除 [:lower:] 和 [:upper:] 转换字符类之外，其他字符类指定的字符都按未指定的顺序放入数组中。由于未定义字符类指定的字符的顺序，仅当目的为将多个字符映射为一个时才使用这些字符。转换字符类除外。 [=C=]:指定所有的字符具有与 C 所指定的字符相同的等价类。 \Octal:指定字符，其编码由 Octal 所指定的八进制值表示。Octal 可以是 1 位、2 位 或 3 位八进制整数。空字符可以用 ‘\0’ 表示，并可以像任何其他的字符那样进行处理。 \ControlCharacter:指定与 ControlCharacter 所指定的值相应的控制字符。 \a警告 \b退格键 \f换页 \n换行 \r回车 \t制表键 \v垂直制表键 \\,\[,\-:反斜杠、左括号、负号 5. 实例 5.1 将文件中出现的”abc“替换为”xyz“ cat file | tr &quot;abc&quot; &quot;xyz&quot; &amp;gt; new_file #这里不是讲字符串”abc“替换成&quot;xyz&quot;，而是将所有的“a”替换为“x”，“b”替换为“y”，“c”替换为“z” 5.2 统一字母大小写 cat file | tr [a-z] [A-Z] &amp;gt; new_file cat file | tr [A-Z] [a-z] &amp;gt; new_file 5.3 将文件中的[0-9]替换为[a-j] cat file | tr [0-9] [a-j] &amp;gt; new_file 5.4 删除文件中出现的“Snail”字符 cat file | tr -d &quot;Snail&quot; &amp;gt; new_file #注意这里不是删除字符串“Snail”,而是删除所有的'S','n','a','i','l' 5.5 删除文件中出现的换行和制表 cat file | tr -d &quot;\n\t&quot; 5.6 删除连续重复字符 cat file | tr -s [a-zA-Z] 5.7 删除空行 cat file | tr -s &quot;\n&quot; 5.8 把路径变量中的冒号“：”替换成换行符“\n” echo $PATH | tr -s &quot;:&quot; &quot;\n&quot; 5.9 创建一个文件中所有单词的列表 tr -cs &quot;\[:lower:]\[:upper:]&quot; &quot;\[\\n\*]&quot; &amp;lt; test 5.10 列转行 tr &quot;\n&quot; &quot; &quot; 5.11 杀死所有包含key的进程 kill -9 `ps aux | grep {key} | awk '{print $2}' | tr &quot;\n&quot; &quot; &quot;`</summary></entry></feed>